import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

//  Note, direct references are made to base1.java.  In changing base java files, either change
//	the references here, or I may find another way for that to happen.
public class piece
{
	private String controller;
	private char body;
	private static int[] gameboardSize = new int[2];
	private static arrayWorks aw = new arrayWorks();
	public String name;
	private int health;
	private int speed;
	private double tempDouble = 0;
	private piece Target;
	private String team;
	private int[] w;
		
	private int x;
	private int y;
	
	
	public piece(String theName, int x1, int y1, char b, int[] theWeapons, int theHealth, int theSpeed, String c, String theTeam)
	{
		w = new int[theWeapons.length];
		for (int i = 0; i < theWeapons.length; i++)
			w[i] = theWeapons[i];
		aw.printIntArray(w);
		this.name = theName;
		this.controller = c;
		this.body = b;
		int i = w.length - 1; // shortens the w[]
		while (w[i] == 0 && i != 0)
		{
			w = aw.eatIntEnd(w);
			//System.out.print("This be w:  ");
			i--;
		}
		aw.printIntArray(w);
		this.health = theHealth;
		this.speed = theSpeed;
		this.x = x1;
		this.y = y1;
		this.team = theTeam;
	}
	
	public void printPieceInfo(String it)
	{
		if (it.equals("name"))
			System.out.println(name);
		else if (it.equals("controller"))
			System.out.println(controller);
		else if (it.equals("body"))
			System.out.println(body);
		else if (it.equals("health"))
			System.out.println(health);
		else if (it.equals("speed"))
			System.out.println(speed);
		else if (it.equals("x y"))
			System.out.println(x + " " + y);
	}
	
	public String returnPieceInfoString(String it)
	{
		String out = "";
		if (it.equals("name"))
			out = name;
		else if (it.equals("controller"))
			out = controller;
		else if (it.equals("body"))
			out += body;
		else if (it.equals("health"))
			out += health;
		else if (it.equals("speed"))
			out += speed;
		else if (it.equals("x y"))
			out = (this.x + " " + this.y);
		
		return out;
	}
	
	// needs this in order to get the size of the board being played on.
	public void quickCheck(gameboard board)
	{
		gameboardSize = board.getSize();
	}
	
	public boolean elbowRoom(int theX, int theY) // Checks if there is elbow-room in the designated location
	{
		int negate = 0;
		for (int i = 0; i < base1.g.thePieces.length; i++)
			if (theX == base1.g.thePieces[i].x && theY == base1.g.thePieces[i].y)
				negate++;
		
		if (negate > 0) // if any match at all...
			return false;
		else
			return true;
	}
	
	public void move() throws FileNotFoundException // In the name of all things living, this one's IMPORTANT.  It covers everything from commands to AI to printing out the gameboard.
	{
		{
			base1.g.printBoard('c'); // Prints the board from base1.java
			
			Scanner s = new Scanner(System.in);
			
			System.out.print(this.name + "'s turn.  ");
			if (this.controller.equals("human")) // informs of speed.
				System.out.print(this.speed + " commands are available.");
			System.out.println();
			for (int i = 0; i < speed; i++)
			{
				String direction = "";
				int check = 0; // acts as the "i" of my for loops.
				int totalInvalids = 0;
				while (check < 1 && s.hasNextLine())
				{
					//if ((this.speed - (i + 1)) != 0) // prevents it from telling you you have 0 commands left.
					//	System.out.println((this.speed - (i + 1)) + " commands left.");
					if (this.controller.equals("human"))
						direction = s.nextLine();
					else
					{
						direction = this.directionAI();
						if (totalInvalids > 20) // limits the number of Invalid Commands to twenty for the AI.
						{
							System.out.println("Check is working");
							direction = "skip";
						}
					}
					
					if (	(direction.equals("up") && this.y != 0 && elbowRoom(this.x, this.y - 1)) ||  // All this junk just makes sure you don't walk off the board.
							(direction.equals("right") && this.x != gameboardSize[0] - 1 && elbowRoom(this.x + 1, this.y)) ||
							(direction.equals("down") && this.y != gameboardSize[1] - 1 && elbowRoom(this.x, this.y + 1)) ||
							(direction.equals("left") && this.x != 0 && elbowRoom(this.x - 1, this.y)) ||
							(direction.equals("AIattack")) ||
							(direction.equals("skip")) ||
							(direction.equals("skip all")))
						check++; // if check is true (above 0), then the command is valid.
					else
					{
						System.out.println("Invalid Command...");
						totalInvalids++;
						System.out.println(totalInvalids + " Invalid Commands by thus far.");
						System.out.println(this.x + " " + this.y);
						System.out.println(this.name + " tried to go " + direction);
					}
					//System.out.println(check + " " + direction);
				}
			
				if (direction.equals("up"))
					this.y--;
				else if (direction.equals("right"))
					this.x++;
				else if (direction.equals("down"))
					this.y++;
				else if (direction.equals("left"))
					this.x--;
				
				else if (direction.equals("skip all"))
					i = speed; // ends all command requests.
			}
		}
	}
	
	public char getChar()
	{
		return this.body;
	}
	
	public String getTeam()
	{
		return this.team;
	}
	
	public int getX()
	{
		return this.x;
	}
	
	public int getY()
	{
		return this.y;
	}
	
	public void damage(int in)
	{
		this.health -= in;
	}

	
	
	/*  HERE BEGINS THE AI  */
	
	public String directionAI() throws FileNotFoundException
	{
		String out = "";
		// chooses target
		double distance = -1000;

		double[] d = new double[base1.g.thePieces.length];
		int avoidThis = -1; // (-) is useful for check
		for (int i = 0; i < base1.g.thePieces.length; i++) // checks for the shortest distance of all targets.
		{
			d[i] = this.getDistance(base1.g.thePieces[i]);
			if (base1.g.thePieces[i].getTeam().equals(this.team)) // IMPORTANT.  Keeps players from targeting their own team-mates
				d[i] += 1000000000; // 'nother ludicrously large number		//   (until all opponents are gone, at which point there
			if (this.getDistance(base1.g.thePieces[i]) == 0)				//   should be a boolean in place to allow victory claimed)
				avoidThis = i;
		}
		d[avoidThis] = 1000000001; // ludicrously large number
		//System.out.println("avoidThis is " + avoidThis);
		 
		distance = aw.minDoubleSpecial(d, avoidThis); // gets distance and affirms Target
		
		this.Target = base1.g.thePieces[aw.minDoubleIndexSpecial(d, avoidThis)];
		/*
		for (int i = 0; i < base1.g.thePieces.length; i++)// This just prints out the distances.
		{
			System.out.println("This should be distance " + this.getDistance(base1.g.thePieces[i]) + " from " + this.name + " to " + base1.g.thePieces[i].name);
		}
		*/
		System.out.println(this.name + "'s current target is " + this.Target.name);
		//System.out.println(this.x + " compared to " + target.x);
		//System.out.println(this.y + " compared to " + target.y);
		
		this.tempDouble = distance;
		
		// THIS is where I'll put the WEAPONS possibility.
		System.out.println("I wonder when this prints...");
		weapons tempWeapon = this.findMaxRange();
		if ((int)(Math.random() * 2 + .5) == 1)
			if ((int)(Math.random() * 2 + .5) == 1 && tempWeapon.attackPossible(this, this.Target)) // 1/3 possibility that, when using weapon, greatest ranged weapon is used.
			{
				tempWeapon.attack(this, this.Target);
				return "AIattack";
			}
			else
			{ // now, a random weapon is chosen, since the AI didn't choose the one with the best range.
				tempWeapon = weaponFromIndex(aw.randomIntChooser(w));
				if (tempWeapon.attackPossible(this, this.Target))
				{
					tempWeapon.attack(this, this.Target);
					return "AIattack";
				}
			}

			// check range of weapon, return true if target's in range.
			out = chooseDirection(this.Target);
		
			return out;
	}
	
	
	/*  ---  weapons and the like BEGIN  ---  */
	public weapons findMaxRange()
	{
		
		int[] theInts = new int[this.w.length];
		for (int i = 1; i < this.w.length; i++)
		{	
			System.out.println("this is i:  " + i);
			theInts[i] = weaponFromIndex(this.w[i]).range;
		}
		int theMax = aw.maxInt(theInts);
		
		for (int i = 0; i < this.w.length; i++)
		{
			if (weaponFromIndex(this.w[i]).range == theMax)
				return weaponFromIndex(this.w[i]);
		}
		return null; // this should be impossible.
	}
	
	public weapons weaponFromIndex(int in)
	{
		for (int i = 0; i < base1.g.theWeapons.length; i++)
			if (base1.g.theWeapons[i].index == in)
				return base1.g.theWeapons[i];
		return null; // this should be impossible.
	}
	/*  ---  weapons and the like END  ---  */
	
	
	public String chooseDirection(piece in) throws FileNotFoundException
	{
		int j = 0;
		if (this.x > in.x && this.y > in.y)
			if ((int)(Math.random() + .5) == 1)
				j = 0;
			else
				j = 3;
		else if (this.x < in.x && this.y > in.y)
			if ((int)(Math.random() + .5) == 1)
				j = 0;
			else
				j = 1;
		else if (this.x > in.x && this.y < in.y)
			if ((int)(Math.random() + .5) == 1)
				j = 2;
			else
				j = 3;
		else if (this.x < in.x && this.y < in.y)
			if ((int)(Math.random() + .5) == 1)
				j = 2;
			else
				j = 1;
		else if (this.x > in.x && this.y == in.y)
			j = 3;
		else if (this.x < in.x && this.y == in.y)
			j = 1;
		else if (this.x == in.x && this.y > in.y)
			j = 0;
		else if (this.x == in.x && this.y < in.y)
			j = 2;
		
		String[] out = {"up", "right", "down", "left"};
		String[] outReturn = {"up", "right", "down", "left"}; // Duct Tape, maybe?
		
		if (this.tempDouble < aw.toInt(this.modeDetail(0))) // mode[0] right now is comfort zone.
			out = aw.rotateStringFwd(out, 2);
		/*
		if (out[0].equals("down")) // toward or away, what is the answer?
			System.out.println(this.name + " is moving away from the target.");
		else if (out[0].equals("up"))
			System.out.println(this.name + " is moving towards the target.");
		else
			System.out.println("What?");
		*/
		//System.out.println(this.getDistance(Target) + " compared to " + aw.toInt(this.modeDetail(0)));
		
		//for (int i = 0; i < 4; i++)
		//	System.out.println(out[i]);
		
		if ((int)(Math.random() * 10) < 2) // IMPORTANT.  This'll keep the player from infinitely trying to go the wrong way.
		{	
			System.out.println("... random direction choice");
			j = (int)(Math.random() * 3 + .5);
		}

		String theOut = out[j]; // possible Duct Tape
		out = outReturn; // also possible Duct Tape
		
		if ((int)(Math.random() * 10) == 2)
			theOut = "skip";
		System.out.println(this.name + " moved " + theOut);
		
		return theOut;
	}
	
	public double getDistance(piece p)
	{
		double distance = 0;
		distance = Math.sqrt(Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2));
		return distance;
	}
	
	public String modeDetail(int i) throws FileNotFoundException
	{
		File f = new File("modeList.txt");
		//Scanner s1 = new Scanner(f);
		Scanner s2 = new Scanner(f);
		
		String[] out = new String[1];
		while (s2.hasNext())		//  This is where each piece is specified in the piece[].
			if (s2.next().equals("*") && s2.next().equals(this.controller))
			{
				// This lists the statistics in order of their appearance in modeList.txt.
				out[0] += s2.next();
			}
		
		return out[i];
	}
	
}
