/*  Student information for assignment
 *
 *  On <our|my> honor, <NAME1> and <NAME2>,
 *  this programming assignment is <our|my> own work.
 *
 *  Student #1:
 *  Name #1:
 *  EID #1:
 *  email address #1:
 *  TA name #1:
 *  Unique course ID #1:
 *  programming hours #1:
 *  
 *  					Began at 12:00 noon
 *
 *  Student #2:
 *  Name #2:
 *  EID #2:
 *  email address #2:
 *  TA name #2:
 *  Unique course ID #2:
 *  programming hours #2:
 *
 * Total Lines of Code (all classes):
*/

import java.util.Scanner;

public class Game
{
	/**
	  * Play a game of war pausing for input after each round.
	  */
	public void go()
	{
		buildGame(1);
	}


	/**
	 * Play a game of war without pausing for input after each round.
	 */
	public void goFast(){

	}


	/**
	 * Play many games of War. Output is suppressed. No results of individual rounds
	 * or games is shown. When complete prints out the number of games won
	 * by each player, the percentage of games won by each player,
	 * and the average number of rounds per game.
	 * @param numGames > 1
	 */
	public void playMany(int numGames){
		
	}

	private Deck HolderDeck;
	private Deck p1Active = new Deck(0);
	private Deck p1Won = new Deck(0);
	private Deck p2Active = new Deck(0);
	private Deck p2Won = new Deck(0);
	
	//private boolean printEveryRound;
	
	public void buildGame(int holderSize)
	{
		System.out.println("Print this LINE!");
		buildHolderDeck(holderSize);
		splitToDecks();
		runRound();
	}
	public void buildHolderDeck(int numDecks)
	{
		this.HolderDeck = new Deck();
		for (int i = 1; i < numDecks; i++)
			this.HolderDeck.addDeck(new Deck());
	}
	public void splitToDecks()
	{
		this.HolderDeck.shuffleThis();
		while (this.HolderDeck.getCount() > 0)
		{
			/*System.out.println("p1Active length: " + p1Active.getCount());
			System.out.println("p2Active length: " + p2Active.getCount());
			System.out.println("Holder Deck: " + HolderDeck.getCount());*/
			this.p1Active.addTopCard(this.HolderDeck.getTopCard());
			this.HolderDeck.eatTopCard();
			this.p2Active.addTopCard(this.HolderDeck.getTopCard());
			this.HolderDeck.eatTopCard();
		}
	}
	public void runRound()
	{
		int totalOwed = 0;
		// first shot
		if (this.p1Active.getTopCard().getRank() > this.p2Active.getTopCard().getRank())
		{
			this.p1Won.addTopCard(this.p2Active.getTopCard());
			this.p2Active.eatTopCard();
		}
		else if (this.p1Active.getTopCard().getRank() < this.p2Active.getTopCard().getRank())
		{
			this.p2Won.addTopCard(this.p1Active.getTopCard());
			this.p1Active.eatTopCard();
		}
		else if (this.p1Active.getTopCard().getRank() == this.p2Active.getTopCard().getRank())
		{
			totalOwed++; // first tie
			totalOwed += 4; // next four cards (includes next battle attempt
			boolean resolved = false;
			System.out.println("Tie.");
			while (resolved = false)
			{
				Card p1Card = this.p1Active.getCard(this.p1Active.getCount() - totalOwed);
				Card p2Card = this.p2Active.getCard(this.p1Active.getCount() - totalOwed);
				System.out.println("p1Card: " + p1Card);
				System.out.println("p2Card: " + p2Card);
				if(p1Card.getRank() > p2Card.getRank())
				{ // if p1 wins...
					for (int i = 0; i < totalOwed; i++)
					{
						if (this.p1Active.getCount() > 0)
						{
							System.out.println("Player 1 wins");
							this.p1Won.addTopCard(this.p2Active.getTopCard());
							this.p1Active.eatTopCard();
							this.p2Active.eatTopCard();
							resolved = true;
						}
						else
						{
							System.out.println("Player 2 wins");
							this.p1Won.shuffleThis();
							this.p1Active = this.p1Won;
							this.p1Won = new Deck(0);
							//recycle.
						}
					}
				}
				if (p1Card.getRank() < p2Card.getRank())
				{ // if p1 wins...
					for (int i = 0; i < totalOwed; i++)
					{
						if (this.p1Active.getCount() > 0)
						{
							this.p2Won.addTopCard(this.p1Active.getTopCard());
							this.p2Active.eatTopCard();
							this.p1Active.eatTopCard();
							resolved = true;
						}
						else
						{
							this.p2Won.shuffleThis();
							this.p2Active = this.p2Won;
							this.p2Won = new Deck(0);
							//recycle.
						}
					}
				}
				else if (p1Card.getRank() == p2Card.getRank())
				{
					totalOwed += 4;
				}
			}
		}
	}

	public static int maxIntIndex(int[] in)
	{
		int out = in[0];
		int prev = in[0];
		for (int i = 0; i < in.length; i++)
		{
			if (i != 0 && in[i] > prev)
			{
				out = i;
				prev = in[i];
			}
		}
		return out;
	}
}
